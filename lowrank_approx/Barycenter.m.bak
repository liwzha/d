function bc = Barycenter(X)
% X - each row is a signal.  each signal is a probability measure.

[N, L] = size(X);

% cost matrix
[Xgrid,Ygrid] = meshgrid(1:L,1:L);
M = abs(Xgrid - Ygrid);

figure(1);
subplot(1,2,1);
plot(X');

% prox-function (for Bregman divergence)
% w = @(x) sum(x.^2);

t0 = 0.2;
t = 1;

a_hat = 1/L*ones(L,1);
a_tilde = 1/L*ones(L,1);


for iter=1:30
    fprintf('iter #%d\n', iter);
    
    beta = (t+1)/2;
    a = (1-1/beta)*a_hat + 1/beta*a_tilde;
    
    figure(1);
    subplot(1,2,2);
    hold off;
    plot(a);
    drawnow;
    
    objec = 0;
    % form subgradient
    alpha = zeros(L,1);
    for ii=1:N
        fprintf('ii = %d\n', ii);
        
        xi = X(ii,:);
        xi = reshape(xi,[numel(xi),1]);
        
        % dual
        lpA = sparse([kron(sparse(eye(L)),ones(L,1)), kron(ones(L,1),sparse(eye(L)))]);
        lpb = M(:);
        lpf = -[a;xi];
        opts = optimset('display', 'off');
        [alpha_beta_i, fval_d] = linprog(lpf,lpA,lpb, [], [], [], [], [], opts);
        alpha_i = alpha_beta_i(1:L);
        
        objec = objec-fval_d;
        
        % choose alpha_i whose first coordinate is zero (due to
        % convention).
%         alpha_i = alpha_i - alpha_i(1)*ones(size(alpha_i));
        alpha = alpha + alpha_i;
        
        % primal
%         lpf = M(:);
%         lpAeq = [kron(ones(1,L), eye(L)); kron(eye(L),ones(1,L))];
%         lpbeq = [a;xi];
%         lqlb = zeros(L*L,1);
%         opts = optimset('display', 'off');
%         [vecP, fval_p] = linprog(lpf,[],[],lpAeq, lpbeq, lqlb, [], [], opts);
%         Pi = reshape(vecP, [L,L]);
%         
%         if fval_d ~= -fval_p
%             fprintf('%f\n',fval_p + fval_d);
%         end
        
    end
    alpha = alpha / N;
    
    fprintf('loss = %f\n', objec);
    
    % proximal mapping: P_a(t0*beta*alpha)
    tba = t0*beta*alpha;
    
%     qpH = 2*eye(L); qpf = tba-2*a; qpAeq = ones(1,L); qpbeq=1; qplb = zeros(L,1);
%     opts = optimset('Algorithm', 'active-set');
%     a_tilde = quadprog(qpH, qpf, [], [], qpAeq, qpbeq, qplb, [], [], opts);
%     a_tilde = abs(a_tilde) / sum(abs(a_tilde));
    a_tilde = a_tilde .* exp(-tba);
    a_tilde = a_tilde / norm(a_tilde, 1);
    
    a_hat = (1-1/beta)*a_hat+1/beta*a_tilde;
    
    t = t+1;

end

bc = a;